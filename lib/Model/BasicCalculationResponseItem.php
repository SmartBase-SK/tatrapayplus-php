<?php
/**
 * BasicCalculationResponseItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Tatrapayplus\TatrapayplusApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TatraPayPlus API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1_2024-05-27v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tatrapayplus\TatrapayplusApiClient\Model;

use \ArrayAccess;
use \Tatrapayplus\TatrapayplusApiClient\ObjectSerializer;

/**
 * BasicCalculationResponseItem Class Doc Comment
 *
 * @category Class
 * @package  Tatrapayplus\TatrapayplusApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BasicCalculationResponseItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'basicCalculationResponseItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loan_interest_rate' => 'float',
        'installment_amount' => 'float',
        'loan_duration' => 'int',
        'preference' => 'bool',
        'main_preference' => 'bool',
        'capacity_validity' => 'bool',
        'rpmn' => 'float',
        'total_amount' => 'float',
        'loan_fee' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'loan_interest_rate' => 'double',
        'installment_amount' => 'double',
        'loan_duration' => null,
        'preference' => null,
        'main_preference' => null,
        'capacity_validity' => null,
        'rpmn' => 'double',
        'total_amount' => 'double',
        'loan_fee' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'loan_interest_rate' => false,
        'installment_amount' => false,
        'loan_duration' => false,
        'preference' => false,
        'main_preference' => false,
        'capacity_validity' => false,
        'rpmn' => false,
        'total_amount' => false,
        'loan_fee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loan_interest_rate' => 'loanInterestRate',
        'installment_amount' => 'installmentAmount',
        'loan_duration' => 'loanDuration',
        'preference' => 'preference',
        'main_preference' => 'mainPreference',
        'capacity_validity' => 'capacityValidity',
        'rpmn' => 'rpmn',
        'total_amount' => 'totalAmount',
        'loan_fee' => 'loanFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loan_interest_rate' => 'setLoanInterestRate',
        'installment_amount' => 'setInstallmentAmount',
        'loan_duration' => 'setLoanDuration',
        'preference' => 'setPreference',
        'main_preference' => 'setMainPreference',
        'capacity_validity' => 'setCapacityValidity',
        'rpmn' => 'setRpmn',
        'total_amount' => 'setTotalAmount',
        'loan_fee' => 'setLoanFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loan_interest_rate' => 'getLoanInterestRate',
        'installment_amount' => 'getInstallmentAmount',
        'loan_duration' => 'getLoanDuration',
        'preference' => 'getPreference',
        'main_preference' => 'getMainPreference',
        'capacity_validity' => 'getCapacityValidity',
        'rpmn' => 'getRpmn',
        'total_amount' => 'getTotalAmount',
        'loan_fee' => 'getLoanFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('loan_interest_rate', $data ?? [], null);
        $this->setIfExists('installment_amount', $data ?? [], null);
        $this->setIfExists('loan_duration', $data ?? [], null);
        $this->setIfExists('preference', $data ?? [], null);
        $this->setIfExists('main_preference', $data ?? [], null);
        $this->setIfExists('capacity_validity', $data ?? [], null);
        $this->setIfExists('rpmn', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('loan_fee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loan_interest_rate'] === null) {
            $invalidProperties[] = "'loan_interest_rate' can't be null";
        }
        if ($this->container['installment_amount'] === null) {
            $invalidProperties[] = "'installment_amount' can't be null";
        }
        if ($this->container['loan_duration'] === null) {
            $invalidProperties[] = "'loan_duration' can't be null";
        }
        if ($this->container['preference'] === null) {
            $invalidProperties[] = "'preference' can't be null";
        }
        if ($this->container['main_preference'] === null) {
            $invalidProperties[] = "'main_preference' can't be null";
        }
        if ($this->container['capacity_validity'] === null) {
            $invalidProperties[] = "'capacity_validity' can't be null";
        }
        if ($this->container['rpmn'] === null) {
            $invalidProperties[] = "'rpmn' can't be null";
        }
        if ($this->container['total_amount'] === null) {
            $invalidProperties[] = "'total_amount' can't be null";
        }
        if (($this->container['total_amount'] > 40000)) {
            $invalidProperties[] = "invalid value for 'total_amount', must be smaller than or equal to 40000.";
        }

        if (($this->container['total_amount'] < 100)) {
            $invalidProperties[] = "invalid value for 'total_amount', must be bigger than or equal to 100.";
        }

        if ($this->container['loan_fee'] === null) {
            $invalidProperties[] = "'loan_fee' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loan_interest_rate
     *
     * @return float
     */
    public function getLoanInterestRate()
    {
        return $this->container['loan_interest_rate'];
    }

    /**
     * Sets loan_interest_rate
     *
     * @param float $loan_interest_rate Loan interest rate
     *
     * @return self
     */
    public function setLoanInterestRate($loan_interest_rate)
    {
        if (is_null($loan_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable loan_interest_rate cannot be null');
        }
        $this->container['loan_interest_rate'] = $loan_interest_rate;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return float
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param float $installment_amount Installment amount
     *
     * @return self
     */
    public function setInstallmentAmount($installment_amount)
    {
        if (is_null($installment_amount)) {
            throw new \InvalidArgumentException('non-nullable installment_amount cannot be null');
        }
        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets loan_duration
     *
     * @return int
     */
    public function getLoanDuration()
    {
        return $this->container['loan_duration'];
    }

    /**
     * Sets loan_duration
     *
     * @param int $loan_duration Loan duration
     *
     * @return self
     */
    public function setLoanDuration($loan_duration)
    {
        if (is_null($loan_duration)) {
            throw new \InvalidArgumentException('non-nullable loan_duration cannot be null');
        }
        $this->container['loan_duration'] = $loan_duration;

        return $this;
    }

    /**
     * Gets preference
     *
     * @return bool
     */
    public function getPreference()
    {
        return $this->container['preference'];
    }

    /**
     * Sets preference
     *
     * @param bool $preference Preferred maturity of loan offer (max 3)
     *
     * @return self
     */
    public function setPreference($preference)
    {
        if (is_null($preference)) {
            throw new \InvalidArgumentException('non-nullable preference cannot be null');
        }
        $this->container['preference'] = $preference;

        return $this;
    }

    /**
     * Gets main_preference
     *
     * @return bool
     */
    public function getMainPreference()
    {
        return $this->container['main_preference'];
    }

    /**
     * Sets main_preference
     *
     * @param bool $main_preference Main preferred maturity of loan offer (max 1)
     *
     * @return self
     */
    public function setMainPreference($main_preference)
    {
        if (is_null($main_preference)) {
            throw new \InvalidArgumentException('non-nullable main_preference cannot be null');
        }
        $this->container['main_preference'] = $main_preference;

        return $this;
    }

    /**
     * Gets capacity_validity
     *
     * @return bool
     */
    public function getCapacityValidity()
    {
        return $this->container['capacity_validity'];
    }

    /**
     * Sets capacity_validity
     *
     * @param bool $capacity_validity Loan offer is valid with respect to entered capacity
     *
     * @return self
     */
    public function setCapacityValidity($capacity_validity)
    {
        if (is_null($capacity_validity)) {
            throw new \InvalidArgumentException('non-nullable capacity_validity cannot be null');
        }
        $this->container['capacity_validity'] = $capacity_validity;

        return $this;
    }

    /**
     * Gets rpmn
     *
     * @return float
     */
    public function getRpmn()
    {
        return $this->container['rpmn'];
    }

    /**
     * Sets rpmn
     *
     * @param float $rpmn Calculated RPMN
     *
     * @return self
     */
    public function setRpmn($rpmn)
    {
        if (is_null($rpmn)) {
            throw new \InvalidArgumentException('non-nullable rpmn cannot be null');
        }
        $this->container['rpmn'] = $rpmn;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float $total_amount Total amount of the order including all fees, insurance, shipping,...
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }

        if (($total_amount > 40000)) {
            throw new \InvalidArgumentException('invalid value for $total_amount when calling BasicCalculationResponseItem., must be smaller than or equal to 40000.');
        }
        if (($total_amount < 100)) {
            throw new \InvalidArgumentException('invalid value for $total_amount when calling BasicCalculationResponseItem., must be bigger than or equal to 100.');
        }

        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets loan_fee
     *
     * @return float
     */
    public function getLoanFee()
    {
        return $this->container['loan_fee'];
    }

    /**
     * Sets loan_fee
     *
     * @param float $loan_fee loan_fee
     *
     * @return self
     */
    public function setLoanFee($loan_fee)
    {
        if (is_null($loan_fee)) {
            throw new \InvalidArgumentException('non-nullable loan_fee cannot be null');
        }
        $this->container['loan_fee'] = $loan_fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


